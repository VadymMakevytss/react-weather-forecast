{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vadym\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\react-weather-forecast\\\\src\\\\components\\\\WeatherComponent\\\\WeatherComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition } from '../api/api';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = ({\n  cityFromForm\n}) => {\n  _s();\n\n  const [weather, setWeather] = useState([]);\n  const [city, setCity] = useState(null);\n  useEffect(() => {\n    const getWeatherData = async () => {\n      navigator.geolocation.getCurrentPosition(showPosition);\n\n      if (!weather && city) {\n        const dataFromServer = await getWeatherByCityName(city, 'metric');\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure,\n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        };\n        localStorage.setItem('city', JSON.stringify(weatherData));\n        setWeather(weatherData);\n        console.log('City: ', city);\n      }\n    };\n\n    getWeatherData();\n  }, []);\n\n  const showPosition = async position => {\n    const cityName = await getWeatherByPosition(position.coords.latitude, position.coords.longitude, 'metric');\n    setCity(cityName.name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"l83pt9BVAk/RtmgpuvNsFLsNOvw=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["C:/Users/vadym/OneDrive/Рабочий стол/react-weather-forecast/src/components/WeatherComponent/WeatherComponent.jsx"],"names":["React","useEffect","useState","ForecastleChart","getWeatherByCityName","getWeatherByPosition","v4","uuidv4","WeatherComponent","cityFromForm","weather","setWeather","city","setCity","getWeatherData","navigator","geolocation","getCurrentPosition","showPosition","dataFromServer","weatherData","id","cityName","name","counrty","sys","country","desciption","main","icon","temperature","temp","humidity","pressure","feels_like","wind","speed","localStorage","setItem","JSON","stringify","console","log","position","coords","latitude","longitude"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,wBAAP;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,YAA3D;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AAAA;;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,cAAc,GAAG,YAAW;AAChCC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,YAAzC;;AAEA,UAAG,CAACR,OAAD,IAAYE,IAAf,EAAqB;AACnB,cAAMO,cAAc,GAAG,MAAMf,oBAAoB,CAACQ,IAAD,EAAO,QAAP,CAAjD;AAEA,YAAIQ,WAAW,GAAG;AAChBC,UAAAA,EAAE,EAAEd,MAAM,EADM;AAEhBe,UAAAA,QAAQ,EAAEH,cAAc,CAACI,IAFT;AAGhBC,UAAAA,OAAO,EAAEL,cAAc,CAACM,GAAf,CAAmBC,OAHZ;AAIhBC,UAAAA,UAAU,EAAER,cAAc,CAAC,SAAD,CAAd,CAA0B,CAA1B,EAA6BS,IAJzB;AAKhBC,UAAAA,IAAI,EAAEV,cAAc,CAAC,SAAD,CAAd,CAA0B,CAA1B,EAA6BU,IALnB;AAMhBC,UAAAA,WAAW,EAAEX,cAAc,CAACS,IAAf,CAAoBG,IANjB;AAOhBC,UAAAA,QAAQ,EAAEb,cAAc,CAACS,IAAf,CAAoBI,QAPd;AAQhBC,UAAAA,QAAQ,EAAEd,cAAc,CAACS,IAAf,CAAoBK,QARd;AAShBC,UAAAA,UAAU,EAAEf,cAAc,CAACS,IAAf,CAAoBM,UAThB;AAUhBC,UAAAA,IAAI,EAAEhB,cAAc,CAACgB,IAAf,CAAoBC;AAVV,SAAlB;AAYAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAepB,WAAf,CAA7B;AAEAT,QAAAA,UAAU,CAACS,WAAD,CAAV;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB9B,IAAtB;AACD;AACJ,KAvBC;;AAyBAE,IAAAA,cAAc;AAEf,GA5BQ,EA4BN,EA5BM,CAAT;;AAkCA,QAAMI,YAAY,GAAG,MAAMyB,QAAN,IAAmB;AACtC,UAAMrB,QAAQ,GAAG,MAAMjB,oBAAoB,CAACsC,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,EAA2BF,QAAQ,CAACC,MAAT,CAAgBE,SAA3C,EAAsD,QAAtD,CAA3C;AACAjC,IAAAA,OAAO,CAACS,QAAQ,CAACC,IAAV,CAAP;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAlDD;;GAAMf,gB;;KAAAA,gB;AAoDN,eAAeA,gBAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition } from '../api/api';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst WeatherComponent = ({ cityFromForm }) => {\n  const [weather, setWeather] = useState([])\n  const [city, setCity] = useState(null)\n \n  useEffect(() => {\n    const getWeatherData = async() => {\n      navigator.geolocation.getCurrentPosition(showPosition);\n\n      if(!weather && city) {\n        const dataFromServer = await getWeatherByCityName(city, 'metric');\n\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure, \n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        }\n        localStorage.setItem('city', JSON.stringify(weatherData))\n\n        setWeather(weatherData);\n        console.log('City: ', city)\n      }\n  }\n\n    getWeatherData()\n    \n  }, []);\n\n  \n  \n \n\n  const showPosition = async(position) => {\n    const cityName = await getWeatherByPosition(position.coords.latitude, position.coords.longitude, 'metric');\n    setCity(cityName.name);\n  }\n \n  return (\n    <div className=\"container\">\n      {\n      \n      }\n    </div>\n  )\n}\n\nexport default WeatherComponent\n"]},"metadata":{},"sourceType":"module"}