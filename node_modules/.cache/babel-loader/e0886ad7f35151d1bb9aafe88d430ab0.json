{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vadym\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\react-weather-forecast\\\\src\\\\components\\\\WeatherComponent\\\\WeatherComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./WeatherComponent.css\";\nimport { getWeatherByPosition, getWeatherByCityName } from '../api/api';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = ({\n  selectedCity\n}) => {\n  _s();\n\n  const [weather, setWeather] = useState(null);\n  const [weatherArr, setWeatherArr] = useState([]);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  useEffect(() => {\n    const getWeatherData = async () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      });\n\n      if (!weather && latitude && longitude) {\n        const dataFromServer = await getWeatherByPosition(latitude, longitude, 'metric');\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure,\n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        };\n        localStorage.setItem('city', JSON.stringify(weatherData));\n        console.log('Weather data: ', weatherData);\n        setWeather(weatherData);\n        setWeatherArr([weatherData]);\n      }\n    };\n\n    getWeatherData();\n  });\n  useEffect(() => {\n    if (selectedCity) {\n      const getWeatherByName = async () => {\n        const weatherFromServer = await getWeatherByCityName(selectedCity, 'metric');\n        console.log('Weather from server: ', weatherFromServer);\n\n        if (weatherFromServer) {\n          console.log('Weather from server inside: ', weatherFromServer);\n        }\n\n        let weatherData = {\n          id: uuidv4(),\n          cityName: weatherFromServer.name,\n          counrty: weatherFromServer.sys[\"country\"],\n          desciption: weatherFromServer.weather[0].main,\n          icon: weatherFromServer.weather[0].icon,\n          temperature: weatherFromServer.main.temp,\n          humidity: weatherFromServer.main.humidity,\n          pressure: weatherFromServer.main.pressure,\n          feels_like: weatherFromServer.main.feels_like,\n          wind: weatherFromServer.wind.speed\n        };\n        console.log(weatherData);\n      };\n\n      getWeatherByName();\n    }\n  }, [selectedCity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weatherArr: weatherArr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"9bo1YgCMkYmUvJlwIh14k/p5UiI=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["C:/Users/vadym/OneDrive/Рабочий стол/react-weather-forecast/src/components/WeatherComponent/WeatherComponent.jsx"],"names":["React","useEffect","useState","getWeatherByPosition","getWeatherByCityName","WeatherCard","v4","uuidv4","WeatherComponent","selectedCity","weather","setWeather","weatherArr","setWeatherArr","latitude","setLatitude","longitude","setLongitude","getWeatherData","navigator","geolocation","getCurrentPosition","position","coords","dataFromServer","weatherData","id","cityName","name","counrty","sys","country","desciption","main","icon","temperature","temp","humidity","pressure","feels_like","wind","speed","localStorage","setItem","JSON","stringify","console","log","getWeatherByName","weatherFromServer"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./WeatherComponent.css\";\nimport { getWeatherByPosition, getWeatherByCityName } from '../api/api';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst WeatherComponent = ({ selectedCity }) => {\n  const [ weather, setWeather] = useState(null);\n  const [ weatherArr, setWeatherArr] = useState([]);\n  const [ latitude, setLatitude ] = useState(null);\n  const [ longitude, setLongitude ] = useState(null);\n \n  useEffect(() => {\n      const getWeatherData = async() => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude)\n        setLongitude(position.coords.longitude)\n      }) \n\n      if(!weather && latitude && longitude) {\n        const dataFromServer = await getWeatherByPosition(latitude, longitude, 'metric');\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure, \n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        }\n        localStorage.setItem('city', JSON.stringify(weatherData))\n        console.log('Weather data: ', weatherData )\n        setWeather(weatherData);\n        setWeatherArr([weatherData])\n      }\n    }\n    getWeatherData();\n        \n  });\n\n  useEffect(() => {\n    \n    if(selectedCity) {\n    const getWeatherByName = async() => {\n      const weatherFromServer = await getWeatherByCityName(selectedCity, 'metric')\n  \n      console.log('Weather from server: ', weatherFromServer)\n     \n      if(weatherFromServer) {\n        console.log('Weather from server inside: ', weatherFromServer)\n      }\n        \n        let weatherData = {\n          id: uuidv4(),\n          cityName: weatherFromServer.name,\n          counrty: weatherFromServer.sys[\"country\"],\n          desciption: weatherFromServer.weather[0].main,\n          icon: weatherFromServer.weather[0].icon,\n          temperature: weatherFromServer.main.temp,\n          humidity: weatherFromServer.main.humidity,\n          pressure: weatherFromServer.main.pressure, \n          feels_like: weatherFromServer.main.feels_like,\n          wind: weatherFromServer.wind.speed\n        }\n\n        console.log(weatherData)\n      \n    }\n\n    getWeatherByName();\n  }\n\n  }, [selectedCity])\n\n  return (\n    <div className=\"container\">\n      <WeatherCard weatherArr={weatherArr} />\n    </div>\n  )\n}\n\nexport default WeatherComponent\n"]},"metadata":{},"sourceType":"module"}