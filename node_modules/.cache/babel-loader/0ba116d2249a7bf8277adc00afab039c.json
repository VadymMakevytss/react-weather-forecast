{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vadym\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\react-weather-forecast\\\\src\\\\components\\\\WeatherComponent\\\\WeatherComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition, getRegionByCoordiats } from '../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = () => {\n  _s();\n\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState(null);\n  useEffect(() => {\n    const getWeatherData = async () => {\n      navigator.geolocation.getCurrentPosition(showPosition);\n      const dataFromServer = await getWeatherByCityName('Dnipro', 'metric');\n      let weatherData = {\n        cityName: dataFromServer.name,\n        counrty: dataFromServer.sys.country,\n        desciption: dataFromServer[\"weather\"][0].main,\n        icon: dataFromServer[\"weather\"][0].icon,\n        temperature: dataFromServer.main.temp,\n        humidity: dataFromServer.main.humidity,\n        pressure: dataFromServer.main.pressure,\n        feels_like: dataFromServer.main.feels_like,\n        wind: dataFromServer.wind.speed\n      };\n      console.log('City: ', city);\n      localStorage.setItem('city', JSON.stringify(weatherData));\n      setWeather(weatherData);\n    };\n\n    getWeatherData();\n  }, [city]);\n\n  const showPosition = async position => {\n    console.log(position.coords.latitude + ' ');\n    const cityName = await getWeatherByPosition(position.coords.latitude, position.coords.longitude, 'metric'); // setCity(cityName[\"city\"]);\n\n    console.log(\"Position: \", cityName.name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__close\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"forecast__close-button\",\n          type: \"button\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecat__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__left\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__city\",\n            children: weather && `${weather.cityName}, ${weather.counrty}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__data\",\n            children: \"FRI, 19 February, 10:17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__right\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__description\",\n            children: [weather && /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: \"50px\",\n                marginRight: \"10px\"\n              },\n              src: `https://openweathermap.org/img/wn/${weather.icon}@2x.png`,\n              alt: \"icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }, this), weather && `${weather.desciption}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__body\",\n        children: weather && /*#__PURE__*/_jsxDEV(ForecastleChart, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__foter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecat__foter-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__temperature\",\n            children: weather && `${weather.temperature}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__fill\",\n            children: weather && `Feels like: ${weather.feels_like}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__footer-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__wind\",\n            children: weather && `Wind: ${weather.wind} m/s`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__humidity\",\n            children: weather && `Humidity: ${weather.humidity}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__pressure\",\n            children: weather && `Pressure: ${weather.pressure}Pa`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"XXVIzxk4ZAXtekX0+iATTctkyQ4=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["C:/Users/vadym/OneDrive/Рабочий стол/react-weather-forecast/src/components/WeatherComponent/WeatherComponent.jsx"],"names":["React","useEffect","useState","ForecastleChart","getWeatherByCityName","getWeatherByPosition","getRegionByCoordiats","WeatherComponent","weather","setWeather","city","setCity","getWeatherData","navigator","geolocation","getCurrentPosition","showPosition","dataFromServer","weatherData","cityName","name","counrty","sys","country","desciption","main","icon","temperature","temp","humidity","pressure","feels_like","wind","speed","console","log","localStorage","setItem","JSON","stringify","position","coords","latitude","longitude","width","marginRight"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition, getRegionByCoordiats } from '../api/api';\n\n\nconst WeatherComponent = () => {\n  const [weather, setWeather] = useState(null)\n  const [city, setCity] = useState(null)\n \n  useEffect(() => {\n    const getWeatherData = async() => {\n      \n      navigator.geolocation.getCurrentPosition(showPosition);\n\n      const dataFromServer = await getWeatherByCityName('Dnipro', 'metric');\n\n      let weatherData = {\n        cityName: dataFromServer.name,\n        counrty: dataFromServer.sys.country,\n        desciption: dataFromServer[\"weather\"][0].main,\n        icon: dataFromServer[\"weather\"][0].icon,\n        temperature: dataFromServer.main.temp,\n        humidity: dataFromServer.main.humidity,\n        pressure: dataFromServer.main.pressure, \n        feels_like: dataFromServer.main.feels_like,\n        wind: dataFromServer.wind.speed\n      }\n\n      console.log('City: ', city)\n\n      localStorage.setItem('city', JSON.stringify(weatherData))\n\n      setWeather(weatherData);\n    }\n    \n    getWeatherData();\n  }, [city]);\n\n  const showPosition = async(position) => {\n    console.log(position.coords.latitude + ' ')\n    const cityName = await getWeatherByPosition(position.coords.latitude, position.coords.longitude, 'metric');\n    // setCity(cityName[\"city\"]);\n    console.log(\"Position: \", cityName.name);\n  }\n \n  return (\n    <div className=\"container\">\n      <div className=\"forecast-card\">\n        <div className=\"forecast__close\">\n            <button className=\"forecast__close-button\" type=\"button\">\n                X\n            </button>\n        </div>\n        <div className=\"forecat__header\">\n          <div className=\"forecast__left\">\n            <div className=\"forecast__city\">\n              {weather && `${weather.cityName}, ${weather.counrty}`}\n            </div>\n            <div className=\"forecast__data\">\n              FRI, 19 February, 10:17\n            </div>\n          </div>\n          <div className=\"forecast__right\">\n          <div className=\"forecast__description\">\n            {weather && <img style={{width: \"50px\", marginRight:\"10px\"}} src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`} alt=\"icon\"></img>}\n            {weather && `${weather.desciption}`}\n            </div>\n          </div>\n        </div>\n        <div className=\"forecast__body\">\n          {weather && <ForecastleChart weather={weather} />}\n        </div>\n        <div className=\"forecast__foter\">\n          <div className=\"forecat__foter-left\">\n            <div className=\"forecast__temperature\">\n              {weather && `${weather.temperature}`}\n            </div>\n            <div className=\"forecast__fill\">\n              {weather && `Feels like: ${weather.feels_like}`}\n            </div>\n          </div>\n          <div className=\"forecast__footer-right\">\n            <div className=\"forecast__wind\">\n              {weather && `Wind: ${weather.wind} m/s`}\n            </div>\n            <div className=\"forecast__humidity\">\n              {weather && `Humidity: ${weather.humidity}%`}\n            </div>\n            <div className=\"forecast__pressure\">\n              {weather && `Pressure: ${weather.pressure}Pa`}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default WeatherComponent\n"]},"metadata":{},"sourceType":"module"}