{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vadym\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\react-weather-forecast\\\\src\\\\components\\\\WeatherComponent\\\\WeatherComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./WeatherComponent.css\";\nimport { getWeatherByPosition } from '../api/api';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = ({\n  cityWeather\n}) => {\n  _s();\n\n  const [weather, setWeather] = useState(null);\n  const [weatherArr, setWeatherArr] = useState([]);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  useEffect(() => {\n    const getWeatherData = async () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      });\n\n      if (!weather && latitude && longitude) {\n        const dataFromServer = await getWeatherByPosition(latitude, longitude, 'metric');\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure,\n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        };\n        localStorage.setItem('city', JSON.stringify(weatherData));\n        console.log('Weather data: ', weatherData);\n        setWeather(weatherData);\n        setWeatherArr([weatherData]);\n      }\n    };\n\n    getWeatherData();\n  });\n  useEffect(() => {\n    let weatherData = {\n      id: uuidv4(),\n      cityName: dataFromServer.name,\n      counrty: dataFromServer.sys.country,\n      desciption: dataFromServer[\"weather\"][0].main,\n      icon: dataFromServer[\"weather\"][0].icon,\n      temperature: dataFromServer.main.temp,\n      humidity: dataFromServer.main.humidity,\n      pressure: dataFromServer.main.pressure,\n      feels_like: dataFromServer.main.feels_like,\n      wind: dataFromServer.wind.speed\n    };\n  }, [cityWeather]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weatherArr: weatherArr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"pqo2jnCjr8NkDZvGRJBqiMAaax0=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["C:/Users/vadym/OneDrive/Рабочий стол/react-weather-forecast/src/components/WeatherComponent/WeatherComponent.jsx"],"names":["React","useEffect","useState","getWeatherByPosition","WeatherCard","v4","uuidv4","WeatherComponent","cityWeather","weather","setWeather","weatherArr","setWeatherArr","latitude","setLatitude","longitude","setLongitude","getWeatherData","navigator","geolocation","getCurrentPosition","position","coords","dataFromServer","weatherData","id","cityName","name","counrty","sys","country","desciption","main","icon","temperature","temp","humidity","pressure","feels_like","wind","speed","localStorage","setItem","JSON","stringify","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./WeatherComponent.css\";\nimport { getWeatherByPosition } from '../api/api';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst WeatherComponent = ({ cityWeather }) => {\n  const [weather, setWeather] = useState(null);\n  const [weatherArr, setWeatherArr] = useState([]);\n  const [ latitude, setLatitude ] = useState(null);\n  const [ longitude, setLongitude ] = useState(null);\n \n  useEffect(() => {\n    const getWeatherData = async() => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude)\n        setLongitude(position.coords.longitude)\n      }) \n\n      if(! weather && latitude && longitude) {\n        const dataFromServer = await getWeatherByPosition(latitude, longitude, 'metric');\n        let weatherData = {\n          id: uuidv4(),\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure, \n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        }\n        localStorage.setItem('city', JSON.stringify(weatherData))\n        console.log('Weather data: ', weatherData )\n        setWeather(weatherData);\n        setWeatherArr([weatherData])\n      }\n    }\n    getWeatherData();\n  });\n\n  useEffect(() => {\n\n    let weatherData = {\n      id: uuidv4(),\n      cityName: dataFromServer.name,\n      counrty: dataFromServer.sys.country,\n      desciption: dataFromServer[\"weather\"][0].main,\n      icon: dataFromServer[\"weather\"][0].icon,\n      temperature: dataFromServer.main.temp,\n      humidity: dataFromServer.main.humidity,\n      pressure: dataFromServer.main.pressure, \n      feels_like: dataFromServer.main.feels_like,\n      wind: dataFromServer.wind.speed\n    }\n\n  }, [cityWeather])\n\n  return (\n    <div className=\"container\">\n      <WeatherCard weatherArr={weatherArr} />\n    </div>\n  )\n}\n\nexport default WeatherComponent\n"]},"metadata":{},"sourceType":"module"}