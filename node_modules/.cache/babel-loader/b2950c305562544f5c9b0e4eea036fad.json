{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vadym\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\react-weather-forecast\\\\src\\\\components\\\\WeatherComponent\\\\WeatherComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition, getRegionByCoordiats } from '../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = () => {\n  _s();\n\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState('');\n  useEffect(() => {\n    const getCity = async () => {\n      let currentCity = \"\";\n      let latitude;\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position);\n        latitude = position.coords.latitude;\n        longitude = position.coords.latitude;\n        console.log('Position latitude: ', latitude);\n        console.log('Position longitude: ', longitude);\n      });\n      currentCity = await getRegionByCoordiats(long, lat);\n      setCity(currentCity);\n    };\n\n    const getWeatherData = async () => {\n      if (!weather) {\n        const dataFromServer = await getWeatherByCityName('Kyiv', 'metric');\n        let weatherData = {\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure,\n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        };\n        localStorage.setItem('city', JSON.stringify(weatherData));\n        setWeather(weatherData);\n      } else {\n        let latitude = 48.4708762;\n        let longitude = 48.4708762;\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position);\n          latitude = position.coords.latitude;\n          longitude = position.coords.latitude;\n          console.log('Position latitude: ', latitude);\n          console.log('Position longitude: ', longitude);\n        });\n        const dataFromServer = await getWeatherByPosition(48.4708762, 48.4708762, 'metric'); // let weatherData = {\n        //   cityName: dataFromServer.name,\n        //   // counrty: dataFromServer.sys.country,\n        //   desciption: dataFromServer[\"weather\"][0].main,\n        //   icon: dataFromServer[\"weather\"][0].icon,\n        //   temperature: dataFromServer.main.temp,\n        //   humidity: dataFromServer.main.humidity,\n        //   pressure: dataFromServer.main.pressure, \n        //   feels_like: dataFromServer.main.feels_like,\n        //   wind: dataFromServer.wind.speed\n        // }\n\n        let weatherData = {};\n        console.log(dataFromServer);\n        setWeather(weatherData);\n      }\n    };\n\n    getWeatherData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__close\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"forecast__close-button\",\n          type: \"button\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecat__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__left\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__city\",\n            children: weather && `${weather.cityName}, ${weather.counrty}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__data\",\n            children: \"FRI, 19 February, 10:17\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__right\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__description\",\n            children: [weather && /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: \"50px\",\n                marginRight: \"10px\"\n              },\n              src: `https://openweathermap.org/img/wn/${weather.icon}@2x.png`,\n              alt: \"icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this), weather && `${weather.desciption}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__body\",\n        children: weather && /*#__PURE__*/_jsxDEV(ForecastleChart, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__foter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecat__foter-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__temperature\",\n            children: weather && `${weather.temperature}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__fill\",\n            children: weather && `Feels like: ${weather.feels_like}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast__footer-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__wind\",\n            children: weather && `Wind: ${weather.wind} m/s`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__humidity\",\n            children: weather && `Humidity: ${weather.humidity}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast__pressure\",\n            children: weather && `Pressure: ${weather.pressure}Pa`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"kn7gbu38uuybVoHFYUK7Ve+IohY=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["C:/Users/vadym/OneDrive/Рабочий стол/react-weather-forecast/src/components/WeatherComponent/WeatherComponent.jsx"],"names":["React","useEffect","useState","ForecastleChart","getWeatherByCityName","getWeatherByPosition","getRegionByCoordiats","WeatherComponent","weather","setWeather","city","setCity","getCity","currentCity","latitude","navigator","geolocation","getCurrentPosition","position","console","log","coords","longitude","long","lat","getWeatherData","dataFromServer","weatherData","cityName","name","counrty","sys","country","desciption","main","icon","temperature","temp","humidity","pressure","feels_like","wind","speed","localStorage","setItem","JSON","stringify","width","marginRight"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./WeatherComponent.css\";\nimport ForecastleChart from '../ForecastleChart/ForecastleChart';\nimport { getWeatherByCityName, getWeatherByPosition, getRegionByCoordiats } from '../api/api';\n\n\nconst WeatherComponent = () => {\n  const [weather, setWeather] = useState(null)\n  const [city, setCity] = useState('');\n \n  useEffect(() => {\n\n    const getCity = async() => {\n      let currentCity = \"\";\n      let latitude\n\n      navigator.geolocation.getCurrentPosition((position) => {\n        console.log(position)\n        latitude = position.coords.latitude;  \n        longitude = position.coords.latitude;  \n        console.log('Position latitude: ', latitude)\n        console.log('Position longitude: ', longitude)\n        \n        \n      })\n\n      currentCity = await getRegionByCoordiats(long, lat)\n\n      setCity(currentCity)\n    }\n\n    const getWeatherData = async() => {\n\n      if(!weather) {\n        const dataFromServer = await getWeatherByCityName('Kyiv', 'metric');\n\n        let weatherData = {\n          cityName: dataFromServer.name,\n          counrty: dataFromServer.sys.country,\n          desciption: dataFromServer[\"weather\"][0].main,\n          icon: dataFromServer[\"weather\"][0].icon,\n          temperature: dataFromServer.main.temp,\n          humidity: dataFromServer.main.humidity,\n          pressure: dataFromServer.main.pressure, \n          feels_like: dataFromServer.main.feels_like,\n          wind: dataFromServer.wind.speed\n        }\n\n        localStorage.setItem('city', JSON.stringify(weatherData))\n       \n        setWeather(weatherData);\n\n      } else {\n        let latitude = 48.4708762;\n        let longitude = 48.4708762;\n        navigator.geolocation.getCurrentPosition((position) => {\n          console.log(position)\n          latitude = position.coords.latitude;  \n          longitude = position.coords.latitude;  \n          console.log('Position latitude: ', latitude)\n          console.log('Position longitude: ', longitude)\n        })\n\n        const dataFromServer = await getWeatherByPosition(48.4708762, 48.4708762, 'metric')\n\n        // let weatherData = {\n        //   cityName: dataFromServer.name,\n        //   // counrty: dataFromServer.sys.country,\n        //   desciption: dataFromServer[\"weather\"][0].main,\n        //   icon: dataFromServer[\"weather\"][0].icon,\n        //   temperature: dataFromServer.main.temp,\n        //   humidity: dataFromServer.main.humidity,\n        //   pressure: dataFromServer.main.pressure, \n        //   feels_like: dataFromServer.main.feels_like,\n        //   wind: dataFromServer.wind.speed\n        // }\n\n        let weatherData = {}\n        \n        console.log(dataFromServer)\n\n        setWeather(weatherData);\n      }\n       \n    }\n\n    \n    getWeatherData();\n  }, []);\n \n  return (\n    <div className=\"container\">\n      <div className=\"forecast-card\">\n        <div className=\"forecast__close\">\n            <button className=\"forecast__close-button\" type=\"button\">\n                X\n            </button>\n        </div>\n        <div className=\"forecat__header\">\n          <div className=\"forecast__left\">\n            <div className=\"forecast__city\">\n              {weather && `${weather.cityName}, ${weather.counrty}`}\n            </div>\n            <div className=\"forecast__data\">\n              FRI, 19 February, 10:17\n            </div>\n          </div>\n          <div className=\"forecast__right\">\n          <div className=\"forecast__description\">\n            {weather && <img style={{width: \"50px\", marginRight:\"10px\"}} src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`} alt=\"icon\"></img>}\n            {weather && `${weather.desciption}`}\n            </div>\n          </div>\n        </div>\n        <div className=\"forecast__body\">\n          {weather && <ForecastleChart weather={weather} />}\n        </div>\n        <div className=\"forecast__foter\">\n          <div className=\"forecat__foter-left\">\n            <div className=\"forecast__temperature\">\n              {weather && `${weather.temperature}`}\n            </div>\n            <div className=\"forecast__fill\">\n              {weather && `Feels like: ${weather.feels_like}`}\n            </div>\n          </div>\n          <div className=\"forecast__footer-right\">\n            <div className=\"forecast__wind\">\n              {weather && `Wind: ${weather.wind} m/s`}\n            </div>\n            <div className=\"forecast__humidity\">\n              {weather && `Humidity: ${weather.humidity}%`}\n            </div>\n            <div className=\"forecast__pressure\">\n              {weather && `Pressure: ${weather.pressure}Pa`}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default WeatherComponent\n"]},"metadata":{},"sourceType":"module"}